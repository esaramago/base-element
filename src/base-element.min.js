export class BaseElement extends HTMLElement{constructor(){super();if(this.render){this.attachShadow({mode:'open'})}}isMounted=false;properties={};render(){}mounted(){}updated(property,oldValue,newValue){}connectedCallback(){this.#init()}#init(){this.#setProps();if(this.render){this.shadowRoot.innerHTML=this.render();this.#renderStyles()}this.isMounted=true;if(this.mounted){this.mounted()}}#setProps(){if(!this.properties){return}const properties={};Object.keys(this.properties).forEach((key)=>{properties[key]={enumerable:true,get(){const property=this.properties[key];const attribute=key.replace(/[A-Z]/g,letter=>`-${letter.toLowerCase()}`);const attributeValue=this.getAttribute(attribute);const defaultValue=property.value;const value=this.#validatePropValue({attribute,value:attributeValue===null||attributeValue===undefined?defaultValue:attributeValue,type:property.type||property,required:property.required,validator:property.validator});return value},set(value){const property=this.properties[key];const attribute=key.replace(/[A-Z]/g,letter=>`-${letter.toLowerCase()}`);const newValue=this.#validatePropValue({attribute,value,type:property.type||property,required:property.required,validator:property.validator});if(newValue===false){this.removeAttribute(attribute)}else{if(newValue===true){this.setAttribute(attribute,"")}else{this.setAttribute(attribute,newValue)}}return newValue}}});Object.defineProperties(this,properties)}#renderStyles(){if(this.styles){this.shadowRoot.insertBefore(document.createElement('style'),this.shadowRoot.firstChild);this.shadowRoot.querySelector('style').textContent=`:host {display: block;}${this.styles()}`}}#validatePropValue(prop){var value=prop.value;if(prop.type===String){value=String(value)}else if(prop.type===Number){value=Number(value)}else if(prop.type===Boolean){if(value==="true"||value===true||value===""){value=true}else{value=false}}if(prop.required&&!value){throw new Error(`Required property ${prop.attribute } is missing`)}if(prop.validator&&!prop.validator(value)){throw new Error(`Property ${prop.attribute } failed validation`)}return value}attributeChangedCallback(attribute,oldValue,newValue){if(!this.isMounted){return}if(oldValue!==newValue){const propertyName=attribute.replace(/-([a-z])/g,(match,letter)=>letter.toUpperCase());this[propertyName]=newValue;if(this.updated){this.updated(propertyName,oldValue,this[propertyName])}}}}